---
swagger: '2.0'
info:
  description: 'This is an API for ResearchXXX'
  version: '1.0.0'
  title: 'ResearchXXX API'
  contact:
    email: 'you@your-company.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: 'admins'
    description: 'Secured Admin-only calls'
  - name: 'guests'
    description: 'Operations available to all visitorts'
  - name: 'loggedin'
    description: 'Operations available to registered users'
  - name: 'accountOwner'
    description: 'Operations available to account owners'
  - name: 'postOwner'
    description: 'Operations available to post owners'
  - name: 'apps'
    description: 'Operations that require an app access key'
schemes:
  - 'https'
host: 
  api.xxx.net
produces:
  - 'application/json'
consumes:
  - 'application/json'
paths:
  /users:
    get:
      tags:
        - 'admins'
        - 'loggedin'
      summary: 'Gets all users (or a subset) depending on the query parameters'
      operationId: 'getUsers'
      description: 'gets all users (or a subset) depending on the query parameters'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'query'
          name: 'searchString'
          description: 'Pass an optional search string for looking up users'
          required: false
          type: 'string'
        - in: 'query'
          name: 'skip'
          description: 'Number of records to skip for pagination'
          type: 'integer'
          format: 'int32'
          minimum: 0
        - in: 'query'
          name: 'limit'
          description: 'Maximum number of records to return'
          type: 'integer'
          format: 'int32'
          minimum: 0
          maximum: 50
      responses:
        200:
          description: 'Successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
        400:
          description: 'Bad input parameter'
  
  /user:
    post:
      tags:
        - 'admins'
      summary: 'Creates a new user'
      description: 'Creates a new user'
      operationId: 'createUser'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: 'User created successfuly'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Bad input parameters'
  
  /user/{userId}:
    get:
      tags:
        - 'admins'
        - 'loggedin'
      summary: 'Find user by ID'
      description: 'Returns a single user'
      operationId: 'getUserById'
      produces: 
        - 'application/json'
      parameters:
        - name: 'userId'
          in: "path"
          description: 'ID of user to return'
          required: true
          type: 'string'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Bad input parameters'
        404:
          description: 'User not found'
    put:
      tags:
        - 'admins'
        - 'accountOwner'
      summary: 'Updates user'
      description: 'This can be done only by logged users and admins'
      operationId: 'updateUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'User ID that needs to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Bad input parameters'
        404:
          description: 'User not found'

    delete:
      tags:
        - 'admins'
        - 'accountOwner'
      summary: 'Delete a user'
      description: 'This can be done only by logged users and admins'
      operationId: 'deleteUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'The User Id that needs to be deleted'
          required: true
          type: 'string'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/User'
        404:
          description: 'User not found'

        
  /user/{userId}/follower:
    put:
        tags:
          - 'loggedin'
        summary: 'Adds a follower to userId'
        description: 'Adds a follower to userId'
        operationId: 'addFollowerToUser'
        produces:
          - 'application/json'
        parameters:
          - name: 'userId'
            in: "path"
            description: 'ID of the followee'
            required: true
            type: 'string'
          - name: 'followerUserId'
            in: 'query'
            description: 'ID of the follower'
            required: true
            type: 'string'
        responses:
          200:
            description: 'Successful operation'
          400:
            description: 'Bad input parameters'
          404:
            description: 'Follower or followee not found'

    delete:
      tags:
        - 'loggedin'
      summary: 'Deletes a follower from userId'
      description: 'This can be done only by logged users'
      operationId: 'deleteFollowerFromUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'userId'
          in: 'path'
          description: 'ID of the followee'
          required: true
          type: 'string'
        - name: 'followerUserId'
          in: 'query'
          description: 'ID of the follower'
          required: true
          type: 'string'
      responses:
        200:
          description: 'Successful operation'
        404:
          description: 'Follower or followee not found'
  
  /posts:
    get:
      tags:
        - 'admins'
        - 'guests'
        - 'loggedin'
      summary: 'Gets all posts (or a subset) depending on the query parameters'
      operationId: 'getPosts'
      description: 'Gets all posts (or a subset) depending on the query parameters'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'query'
          name: 'searchString'
          description: 'Pass an optional search string for looking up posts'
          required: false
          type: 'string'
        - in: 'query'
          name: 'skip'
          description: 'Number of records to skip for pagination'
          type: 'integer'
          format: 'int32'
          minimum: 0
        - in: 'query'
          name: 'limit'
          description: 'Maximum number of records to return'
          type: 'integer'
          format: 'int32'
          minimum: 0
          maximum: 50
      responses:
        200:
          description: 'Successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Post'
        400:
          description: 'Bad input parameter'
  
  /post:
    post:
      tags:
        - 'loggedin'
      summary: 'Creates a post'
      description: 'Creates a post'
      operationId: 'createPost'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created post object'
          required: true
          schema:
            $ref: '#/definitions/Post'
      responses:
        201:
          description: 'Post created successfuly'
          schema:
            $ref: '#/definitions/Post'
        400:
          description: 'Bad input parameters'
  
  /post/{postId}:
    get:
      tags:
        - 'admins'
        - 'loggedin'
      summary: 'Find post by ID'
      description: 'Returns a single post'
      operationId: 'getPostById'
      produces: 
        - 'application/json'
      parameters:
        - name: 'postId'
          in: "path"
          description: 'ID of post to return'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/Post'
        400:
          description: 'Bad input parameters'
        404:
          description: 'Post not found'
    
    #notice that flagging a post is done by updating the attribute flagged=true
    put:
      tags:
        - 'postOwner'
      summary: 'Updates post'
      description: 'This can be done only by post owners'
      operationId: 'updatePost'
      produces:
        - 'application/json'
      parameters:
        - name: 'postId'
          in: 'path'
          description: 'Post ID that needs to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated post object'
          required: true
          schema:
            $ref: '#/definitions/Post'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/Post'
        400:
          description: 'Bad input parameters'
        404:
          description: 'Post not found'

          
    delete:
      tags:
        - 'admins'
        - 'postOwner'
      summary: 'Delete a post'
      description: 'This can be done only by post owners'
      operationId: 'deletePost'
      produces:
        - 'application/json'
      parameters:
        - name: 'postId'
          in: 'path'
          description: 'The Post Id that needs to be deleted'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        200:
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/Post'
        404:
          description: 'Post not found'

  
  /post/{postId}/follower:
    put:
        tags:
          - 'loggedin'
        summary: 'Adds a follower to postId'
        description: 'Adds a follower to postId'
        operationId: 'addFollowerToPost'
        produces:
          - 'application/json'
        parameters:
          - name: 'postId'
            in: "path"
            description: 'ID of the followed post'
            required: true
            type: 'string'
          - name: 'followerUserId'
            in: 'query'
            description: 'ID of the follower'
            required: true
            type: 'string'
        responses:
          200:
            description: 'Successful operation'
          400:
            description: 'Bad input parameters'
          404:
            description: 'Follower or post not found'

    delete:
      tags:
        - 'loggedin'
      summary: 'Deletes a follower from postId'
      description: 'This can be done only by logged users'
      operationId: 'deleteFollowerFromPost'
      produces:
        - 'application/json'
      parameters:
        - name: 'postId'
          in: 'path'
          description: 'ID of the followed post'
          required: true
          type: 'string'
        - name: 'followerUserId'
          in: 'query'
          description: 'ID of the follower'
          required: true
          type: 'string'
      responses:
        200:
          description: 'Successful operation'
        404:
          description: 'Follower or post not found'
  
  /tags:
    get:
      tags:
        - 'admins'
        - 'guests'
      summary: 'Gets all tags (or a subset) depending on the query parameters'
      operationId: 'getTags'
      description: 'gets all tags (or a subset) depending on the query parameters'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'query'
          name: 'searchString'
          description: 'Pass an optional search string for looking up tags'
          required: false
          type: 'string'
        - in: 'query'
          name: 'skip'
          description: 'Number of records to skip for pagination'
          type: 'integer'
          format: 'int32'
          minimum: 0
        - in: 'query'
          name: 'limit'
          description: 'Maximum number of records to return'
          type: 'integer'
          format: 'int32'
          minimum: 0
          maximum: 50
      responses:
        200:
          description: 'Successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Tag'
        400:
          description: 'Bad input parameter'
  
definitions:
  User:
    type: object
    required:
      - 'id'
      - 'name'
    properties:
      id:
        type: 'string'
        example: 'user123'
      name:
        type: 'string'
        example: 'John Smith'
  Post:
    type: object
    required:
      - 'id'
      - 'type'
      - 'text'
    properties:
      id:
        type: 'integer'
        format: 'int64'
        example: 123456
      type:
        type: 'string'
        enum:
          - 'tweet'
          - 'question'
          - 'request'
        default: 'tweet'
      text:
        type: 'string'
        example: 'Please, send us you feedback on our paper http://example.com/paper123.pdf'
      visibleTo:
        type: 'array'
        items:
          type: 'string'
      chkSimQuestions:
        type: 'boolean'
        default: false
      askAnonym:
        type: 'boolean'
        default: false
      informalReview:
        type: 'boolean'
        default: false
      upVotes:
        type: 'integer'
        format: 'int32'
      downVotes:
        type: 'integer'
        format: 'int32'
      interesteesCount:
        type: 'integer'
        format: 'int32'
      flagged:
        type: 'boolean'
      replies:
        type: 'array'
        items:
          $ref: '#/definitions/Reply'
      comments:
        type: 'array'
        items:
          $ref: '#/definitions/Comment'
  Tag:
    type: object
    required:
      - 'name'
    properties:
      name:
        type: 'string'
        example: 'crowdsourcing'
  Comment:
    type: object
    required:
      - 'id'
      - 'text'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      text:
        type: 'string'
        example: 'this is a comment...'
  Reply:
    type: object
    required:
      - 'id'
      - 'text'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      text:
        type: 'string'
        example: 'this is a reply to our question...'
      upVotes:
        type: 'integer'
        format: 'int32'
      downVotes:
        type: 'integer'
        format: 'int32'
      flagged:
        type: 'boolean'
      comments:
        type: 'array'
        items:
          $ref: '#/definitions/Comment'        